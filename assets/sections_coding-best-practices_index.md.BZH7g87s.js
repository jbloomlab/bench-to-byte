import{_ as a,c as n,m as s,a as e,t,V as l,o}from"./chunks/framework.rMwTSdrC.js";const m=JSON.parse('{"title":"Section 8: Coding best practices","description":"","frontmatter":{"layout":"doc","title":"Section 8: Coding best practices","sidebar":true,"aside":true},"headers":[],"relativePath":"sections/coding-best-practices/index.md","filePath":"sections/coding-best-practices/index.md"}'),r={name:"sections/coding-best-practices/index.md"},h={id:"frontmatter-title",tabindex:"-1"},p=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),k=l(`<p>Hopefully, you&#39;re already aware of the importance of <a href="/bench-to-byte/sections/organizing-your-projects/">properly organizing your projects</a>, <a href="/bench-to-byte/sections/tracking-your-code/">tracking your code</a>, and <a href="/bench-to-byte/sections/creating-workflows-and-pipelines/">organizing complex analyses into automated workflows</a>. In this final section, I&#39;ll highlight some important language-agnostic tips for improving your coding.</p><h2 id="following-conventions" tabindex="-1">Following conventions <a class="header-anchor" href="#following-conventions" aria-label="Permalink to &quot;Following conventions&quot;">​</a></h2><p>Each programming language has established <em>conventions</em> that cover aspects like code formatting, indentation, naming styles, and file organization. Adhering to these is crucial for writing clean, readable, and maintainable code.</p><p>There are often <em>style guides</em> that outline common conventions for programming languages. For examples, Python has the <a href="https://peps.python.org/pep-0008/" target="_blank" rel="noreferrer">PEP 8 style guide</a>, which recommends using 4 spaces for indentation, limiting lines to 79 characters, and using lowercase with underscores for function and variable names.</p><p>Remembering all of these recommendation while you&#39;re coding would be a huge pain. Thankfully, code formatters like <a href="https://black.readthedocs.io/en/stable/" target="_blank" rel="noreferrer"><code>black</code></a> can automatically format code to adhere to a specific style.</p><h2 id="naming-variables" tabindex="-1">Naming variables <a class="header-anchor" href="#naming-variables" aria-label="Permalink to &quot;Naming variables&quot;">​</a></h2><p>Choosing the right names for your variables is like labeling boxes in the -80C: it helps you and others understand what&#39;s inside without digging through them. Here are some universal best practices for naming variables:</p><ul><li><strong>Don&#39;t Use Reserved Words</strong>: Most programming languages have &#39;reserved words&#39; with special meanings (e.g. <code>for</code>, <code>true</code>, and <code>if</code>). Familiarize yourself these words so you don&#39;t accidentally name something with one. Typically, a good syntax highlighter or linter will catch these mistakes.</li><li><strong>Use Descriptive Names</strong>: Use clear and descriptive names that convey the purpose of the variable. For example, if you have a data frame of gene expression data use <code>gene_expression_df</code> instead of just using <code>df</code>.</li><li><strong>Avoid Abbreviations</strong>: Unless they are standard abbreviations that people reading your code are likely to understand.</li><li><strong>Be Consistent</strong>: Stick to a naming convention and use it consistently. Each programming language has preferred naming conventions for variables, classes, and functions. For example, variables in Python are usually written in <code>snake_case</code> whereas variables in Javascript are written in <code>camelCase</code>.</li></ul><h2 id="commenting-code" tabindex="-1">Commenting code <a class="header-anchor" href="#commenting-code" aria-label="Permalink to &quot;Commenting code&quot;">​</a></h2><p>Comments are annotations in your code that explain what&#39;s happening, but they should be used judiciously. It&#39;s tempting for a beginning programmer to comment every line of code. This practice can actually make the code harder to read. Generally, you want to say <em>why</em> code is the way it is, not <em>what</em> the code is doing. If you&#39;re following the advice mentioned in this section, your code should be pretty clear even in the absence of comments.</p><p>Here&#39;s an example of well commented code from a Python packaged developed by the Bloom lab called <a href="https://github.com/jbloomlab/polyclonal/tree/main" target="_blank" rel="noreferrer"><code>Polyclonal</code></a>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> corr_heatmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    corr_df,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    corr_col,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sample_cols,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    group_col</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    corr_range</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    columns</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    diverging_colors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scheme</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;Plot a correlation matrix as heat map from a tidy data frame of correlations.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Parameters</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ----------</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    corr_df : pandas.DataFrame</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Data to plot.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    corr_col : str</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Column in \`corr_df\` with correlation coefficient.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    sample_cols : str or list</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Column(s) in corresponding to sample identifiers, suffixed by &quot;_1&quot; and &quot;_2&quot; for</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        the distinct samples. Should be entries for all pairs of samples.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    group_col : str or None</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Column in \`corr_df\` to facet plots on, or \`None\` if no facets.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    corr_range : tuple or None</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Range of heat map as \`(min, max)\`, or \`None\` to use data range. Typically</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        you will want to set to \`(0, 1)\` for :math:\`r^2\` and \`(-1, 1)\` for :math:\`r\`.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    columns : int</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Facet by \`group_col\` into this many columns.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    diverging_colors : None or bool</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        If \`True\`, mid point of color scale is set to zero. If \`None\`, select \`True\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        if \`corr_range\` extends below 0.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    scheme : None or str</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Color scheme to use, see https://vega.github.io/vega/docs/schemes/.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        If \`None\`, choose intelligently based on \`corr_range\` and \`diverging_colors\`.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Returns</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    -------</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    altair.Chart</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Heatmap(s) of correlation coefficients.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    corr_df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corr_df.copy()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># so we don&#39;t change input data frame</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corr_col </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corr_df:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ValueError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">corr_col</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not in </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">corr_df.columns</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corr_range </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        corr_range </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (corr_df[corr_col].min(), corr_df[corr_col].max())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corr_range[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corr_df[corr_col].min():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ValueError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">corr_range[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">corr_df[corr_col].min()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corr_range[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corr_df[corr_col].max():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ValueError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">corr_range[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">corr_df[corr_col].max()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Notice two things: (1) the function has a &#39;<a href="https://www.geeksforgeeks.org/python-docstrings/" target="_blank" rel="noreferrer">Docstring</a>&#39; that describes the function&#39;s purpose, inputs, and outputs. (2) The code is commented judiciously, and uses comments to explain aspects of the code that aren&#39;t self-explanatory.</p><h2 id="modularizing-code" tabindex="-1">Modularizing code <a class="header-anchor" href="#modularizing-code" aria-label="Permalink to &quot;Modularizing code&quot;">​</a></h2><p>Breaking your code into smaller, reusable pieces makes it easier to manage and understand. Those pieces can be functions, classes, or modules depending on the conventions of the programming language. Generally, you don&#39;t want to have repetitive code. If you&#39;re copying and pasting code from one part of your script into another, that&#39;s a sign that you should be modularizing you code with functions or classes.</p><h2 id="logging-errors-and-warnings" tabindex="-1">Logging, Errors, and Warnings <a class="header-anchor" href="#logging-errors-and-warnings" aria-label="Permalink to &quot;Logging, Errors, and Warnings&quot;">​</a></h2><p>It&#39;s important to use logs, warnings, and errors to monitor what&#39;s going on with your code. You should have expectations about how your code is supposed to work. These features help ensure that those expectations are met. They prevent silent bugs and help make your code user-friendly.</p><h2 id="notebooks-vs-scripts" tabindex="-1">Notebooks vs Scripts <a class="header-anchor" href="#notebooks-vs-scripts" aria-label="Permalink to &quot;Notebooks vs Scripts&quot;">​</a></h2><p>Programming languages that are commonly used for data analysis, like Python and R, have interactive environments called &#39;Notebooks&#39; that combine code execution, text, and visualizations in a single document. Notebooks are awesome tools for data analysis, but sometimes scripts are better suited to the task. How do you decide whether to use a Notebook or a script?</p><p><strong>When to use a Notebook (i.e. Jupyter Notebooks):</strong></p><p>Notebooks are awesome because they combine code, visualizations, and documentation in a single location. You can also run code interactively. I typically use Notebooks for:</p><ul><li><strong>Prototyping code</strong>: It&#39;s hard to beat the convenience of running code interactively.</li><li><strong>Documenting an analysis</strong>: If I&#39;m working on an analysis that I want to document for other people it&#39;s nice to have code, writing, and plots in a single location.</li></ul><p><strong>When to use a script:</strong></p><p>Scripts a great way of <a href="#modularizing-code">modularizing code</a> that you&#39;re going to run often. I typically use scripts over Notebooks in the following situations:</p><ul><li><strong>Frequently used code</strong>: Scripts are smaller, faster, and simpler to run than Notebooks. I use scripts to modularize code that functions as a tool I plan to run frequently.</li></ul>`,25);function d(i,c,g,y,E,u){return o(),n("div",null,[s("h1",h,[e(t(i.$frontmatter.title)+" ",1),p]),k])}const f=a(r,[["render",d]]);export{m as __pageData,f as default};
